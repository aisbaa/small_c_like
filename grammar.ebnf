* EBNF
** PROGRAM
<PROGRAM>               ::= { <declaration> } "int main() {" <code_block> "}"

<declaration>           ::= <function_declaration> | <struct_schedule>

** FUNCTION
<function_declaration>  ::= <data_type> <function_name> "(" [<parameter_list>] ")" "{" <function_body> "};"

<function_call>         ::= [<variable_name> "="] <function_name> "(" [<parameter_list>] ");"

*** FUNCTION INTERNALS
<function_name>         ::= <word>

<function_body>         ::= <code_block> 

** CODE BLOCK
<code_block>            ::= { <simple_code_block> | <return> }

<simple_code_block>     ::= <variable_declaration> | <variable_assignment> | <function_call> | <while> | <for> | <if>

** OUTPUT
<output_declaration>    ::= "printf(" <output_data> ");"

*** OUTPUT INTERNALS

<output_data>           ::= <out_word> | <out_var> | <mixed>
<out_word>              ::= '"' <word> '"'
<out_var>               ::= <variable_name>
<mixed>                 ::= [ <out_word> | <out_var> ] "+" <output_data>

** INPUT
<input_declaration>     ::= <variable_name> = "scanf(" <natral_number> ");"

** CONTROL STATEMENTS
<if>                    ::= "if (" <condition> ")" "{" <code_block> "}" [ <else_declaration> ]
<else_declaration>      ::= <else_if> | <else>
<else_if>               ::= "else" <if>
<else>                  ::= "else {" <code_block> "}"

*** CONTROL STATEMENT INTERNALS
<condition>             ::= <bool_value> | <comparison> | <logic_operation>
<logic_operation>       ::= <bool_value> <logical_operator> <bool_value>
<comparison>            ::= <comparable> <comparison_operator> <comparable>
<comparable>            ::= <variable_name> | <digit> | '"' <word> '"'

*** COMPARISON OPERATORS
<comparison_operator>   ::= "==" | "!=" | ">" | "<" | "<=" | ">="
<logical_operator>      ::= "&&" | "||"

** CYCLES
*** FOR
<for>                   ::= "for (" <for_inside_decl> ";" <for_inside_test> ";" <for_inside_action> ")" "{" <code_block> "}"
**** FOR INTERNALS
<for_inside_decl>       ::= <variable_declaration> | <nothing>
<for_inside_test>       ::= <condition>
<for_inside_action>     ::= <var_minimal_assignment>  | <nothing>

*** WHILE
<while>                 ::= "while (" <condition> ")" "{" <code_block> "}"

** STRUCT
<struct_schedule>       ::= "struct" <struct_name> "{" <struct_body> "};"

<struct_body>           ::= { <variable_declaration> }

<struct_declaration>    ::= <struct_name> <variable_name> ";"

<struct_usage_get_val>  ::= <variable_name> "->" <variable_name> ";"

<struct_usage_set_val>  ::= <variable_name> "->" <variable_name> "=" <value> ";"

<struct_name>           ::= <word>

** ARRAY
<array_declaration>     ::= <data_type> <array_name> "[" <natural_number> "]" ["=" <fill_array_values>] ";"

<array_usage>           ::= <array_name> "[" <array_indicator> "]"

<array_indicator>       ::= <natural_number> | <variable_name> | <arithmetic_expression>

<array_name>            ::= <word>

*** ARRAY INTERNALS
<fill_array_values>     ::= <numeric_array_fill> | <char_array_fill>

<numeric_array_fill>    ::= "{" <nubmers_in_array> "}"

<nubmers_in_array>      ::= <int> { "," <int> }

<char_array_fill>       ::= <string>

** VARIABLE
<variable_declaration>        ::= <data_type> <variable_single_declaration> {"," <variable_single_declaration>} ";"

<variable_single_declaration> ::= <variable_name> [ "=" <arithmetic_expression> ]

<variable_assignment>         ::= <var_minimal_assignment> ";"

<var_minimal_assignment>      ::= <variable_name> "=" <arithmetic_expression>

<variable_name>               ::= <word>

** ARITHMETIC
<arithmetic_expression> ::= <term> | <factor> <composition> <term>
<term>                  ::= <factor> | <factor> <multi_div> <term>
<factor>                ::= <int> | <array_usage> | <struct_usage_get_val> | "(" <arithmetic_expression> ")"

<composition>           ::= <add> | <sub>
<multi_div>             ::= <mul> | <div> | <mod>

<add>                   ::= "+"
<sub>                   ::= "-"

<mul>                   ::= "*"
<div>                   ::= "/"
<mod>                   ::= "%"

** SIMPLE DATA TYPES
<data_type>         ::= "int" | "char" | <struct_name>

<int>               ::= "0" | [ "-" ] <natural_number>

<char>              ::= "'" <letter_or_digit> "'"

<letter_or_digit>   ::= <letter> | <digit>

<bool_value>        ::= "true" | "false"

** RETURN
<return>            ::= "return" <return_value> ) ";"
<return_value>      ::= <arithmetic_expression> | <variable_name> | <int>

** GENERIC
<nothing>           ::=

<parameter_list>    ::= <parameter> [ {"," <parameter>} ]

<parameter>         ::= <data_type> <word>

*** GENERIC NUMERIC
<natural_number>    ::= <digit> | <digit_exclude_zero> {<digit>}

<digit>             ::= "0" | <digit_exclude_zero>

<digit_exclude_zero>::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

*** GENERIC ALPHABETIC
<word>              ::= <letter> { <letter_or_digit> }

<letter_or_digit>   ::= <letter> | <digit>

<letter>            ::= "A" | "B" | "C" | "D" | "E" | "F" | "G"
                      | "H" | "I" | "J" | "K" | "L" | "M" | "N"
                      | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
                      | "V" | "W" | "X" | "Y" | "Z" |
                      | "a" | "b" | "c" | "d" | "e" | "f" | "g"
                      | "h" | "i" | "j" | "k" | "l" | "m" | "n"
                      | "o" | "p" | "q" | "r" | "s" | "t" | "u"
                      | "v" | "w" | "x" | "y" | "z"




* EXAMPLE
struct coordinates3d {
  int x, y, z;
} coordinates3d;

int add(int a, int b) {
  return (a +b);
};

int grt(int a, int b) {
  if (a > b)
    return true;
  else
    return false;
};

int main() {
  int sveikas = 5;
  char raide = 'a';

  int  aibe [5] = {1, 2, 3, 4, 5};
  char raides[5] = "abcd\0";
  char zodis[6] = "Labas\0";


  sveikas = sveikas +5 *10 /2 -6;


  while (sveikas > 5)
    sveikas -= 5;

  printf("\n%d\n", sveikas);

  if (sveikas == 5) {
    printf("puikumelis sveikas == 5\n");
  } else if (sveikas > 3) {
    printf("puikumelis sveikas > 3\n");
  } else if (sveikas < 4) {
    printf("puikumelis sveikas < 4\n");
  } else if (sveikas <= 3) {
    printf("puikumelis sveikas <= 3\n");
  } else if (sveikas >= 1) {
    printf("puikumelis sveikas >= 1\n");

  printf("zodis = " +zodis +"\ngalite pakeisti zodzio reiksme: ");
  scanf(5);
  printf(zodis +"\n" +raides);

  return 0;
}
