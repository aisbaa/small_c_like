* Syntax explanation
  |--------------+----------------------------|
  | symbol       | explanation                |
  |--------------+----------------------------|
  | []           | optional items             |
  | {}           | repeat 0 or more times     |

* simple program scheme
** [done] function declaration
*** code block
** [done] main function
*** code block

* code block
** [done] function calls
*** simple
*** with assignment
** [done] Io structures
*** [done] output
*** [done] input
** [done] control structures
*** [done] if
*** [done] if { else if } else
** [half semi] cycles structures
*** [semi] for
**** code block
*** while
**** code block
** variable
*** [done] var declaration
*** [done] var assignment
*** [done] arithmetic
*** [done] array
*** data types
** [done] structures
** return
*** return code
**** var
**** value

* notes
** gali būti klaidų
** use <natural_number> instead of <digit>
** no groups
** add <string>
** check <data_types>

* EBNF FORM
** PROGRAM
<PROGRAM>               ::= [ { <declaration> } ] "int main() {" <code_block> "}"

<declaration>           ::= <function_declaration> | <struct_schedule>

** CODE BLOCK
<code_block>            ::= [ { <simple_code_block> | <return> } ]

<simple_code_block>     ::= <variable_declaration> | <variable_assignment> | <function_call> | <while> | <for> | <if>

** FUNCTION
<function_declaration>  ::= <data_type> <function_name> "(" [<parameter_list>] ")" "{" <function_body> "};"

<function_call>         ::= [<variable_name> "="] <function_name> "(" [<parameter_list>] ");"

*** FUNCTION INTERNALS
<function_name>         ::= <word>

<function_body>         ::= <code_block> 

** OUTPUT
<output_declaration>    ::= "printf(" <output_data> ");"

*** OUTPUT INTERNALS
<output_data>           ::= '"' <word> '"' | <variable_name>
// c like (hard one)
// <output_data>        ::= "'" <word> "'" [ <variable_name> [{, <variable_name>}] ]

** INPUT
<input_declaration>     ::= "scanf(" <variable_name> ");"

** CONTROL STATEMENTS
<if>                    ::= "if (" <condition> ")" "{" <code_block> "}" [ <else_declaration> ]
<else_declaration>		::= <else_if> | <else>
<else_if>				::= "else" <if>
<else>					::= "else {" <code_block> "}"

*** CONTROL STATEMENTS INTERNALS
<condition>             ::= <bool_value> | <comparison> | <logic_operation>
<logic_operation>       ::= <bool_value> <logical_operator> <bool_value>
<comparison>            ::= <comparable> <comparison_operator> <comparable>
<comparable>            ::= <variable_name> | <digit> | '"' <word> '"'

*** COMPARISON OPERATORS
<comparison_operator>   ::= "==" | "!=" | "<>" | ">" | "<" | "<=" | ">="
<logical_operator>      ::= "&&" | "||"

** CYCLES
*** FOR
<for>                   ::= "for (" <forever_for> | <for_dec> ")" "{" <code_block> "}"
**** FOR INTERNALS
<forever_for>			::= ";;"
<for_dec>				::= <for_inside_decl> ";" <for_inside_test>; <for_inside_action>
<for_inside_decl>       ::= "int" <variable_name> "=" <int>
<for_inside_test>       ::= <variable_name> <for_comparison> <int>
<for_inside_action>     ::= <variable_name> "=" <variable_name> "+" <int>

**** old
<for>                   ::= "for (" <for_body> ")" "{" <simple_code_block> "}"
<for_body>              ::= "int" <variable_name> "=" <int> ";" <variable_name> <for_comparison> <int> ";" <variable_name> "=" <variable_name> "+" <int>
<for_comparison>        ::= "<" | "<="

*** WHILE
<while>                 ::= "while (" <while_body> ")" "{" <code_block> "}"

**** WHILE INTERNALS
<while_body>			::= <bool_operator> | <digit_operator> | <logic_op>
<logic_op>				:: <while_body> <logical_operator> <while_body>
<bool_operator>			::= <variable> <comparison_operator> <bool_value>
<digit_operator>		::= <variable> <comparison_operator> <digit>

** STRUCT
<struct_schedule>       ::= <struct_name> "{" <struct_body> "};"

<struct_declaration>    ::= <struct_name> <variable_name> ";"

*** STRUCT INTERNALS
<struct_name>           ::= <word>

<struct_body>           ::= [ { <variable_declaration> } ]

** VARIABLE
<variable_declaration>  ::= <data_type> <variable_name> [ "=" <arithmetic_expression> ] ";"

<variable_assignment>   ::= <variable_name> "=" <arithmetic_expression> ";"

<variable_name>         ::= <word>

** ARITHMETIC
<arithmetic_expression> ::= <term> | <factor> <composition> <term>
<term>                  ::= <factor> | <factor> <multi_div> <term>
<factor>                ::= <int> | "(" <arithmetic_expression> ")"

<composition>           ::= <add> | <sub>
<multi_div>             ::= <mul> | <div> | <mod>

<add>                   ::= "+"
<sub>                   ::= "-"

<mul>                   ::= "*"
<div>                   ::= "/"
<mod>                   ::= "%"

** ARRAY
<array_declaration>     ::= <data_type> <word> "[" <natural_number> "]" ["=" <fill_array_values>] ";"

<array_usage>           ::= word "[" <array_indicator> "]"

<array_indicator>       ::= <natural_number> | <variable_name>

*** ARRAY INTERNALS
<fill_array_values>     ::= <numeric_array_fill> | <char_array_fill>

<numeric_array_fill>    ::= "{" <numers_in_array> "}"

<numers_in_array>       ::= <int> { "," <int> }

<char_array_fill>       ::= <string>

** SIMPLE DATA TYPES
<data_type>         ::= "int" | "char" | <struct_name>

<int>               ::= "0" | [ "-" ] <natural_number>

<char>              ::= "'" (<letter> | <digit>) "'"

<bool_value>       ::= "true" | "false"

** RETURN
<return>            ::= "return" (<natural_number> | <variable_name>) ";"

** GENERIC
<parameter_list>    ::= <parameter> [ {"," <parameter>} ]

<parameter>         ::= <data_type> <word>

*** GENERIC NUMERIC
<natural_number>    ::= <digit> | <digit_exclude_zero> {<digit>}

<digit>             ::= "0" | <digit_exclude_zero>

<digit_exclude_zero>::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

*** GENERIC ALPHABETIC
<word>              ::= <letter> { <letter_or_digit> }

<letter_or_digit>   ::= <letter> | <digit>

<letter>            ::= "A" | "B" | "C" | "D" | "E" | "F" | "G"
                      | "H" | "I" | "J" | "K" | "L" | "M" | "N"
                      | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
                      | "V" | "W" | "X" | "Y" | "Z" |
                      | "a" | "b" | "c" | "d" | "e" | "f" | "g"
                      | "h" | "i" | "j" | "k" | "l" | "m" | "n"
                      | "o" | "p" | "q" | "r" | "s" | "t" | "u"
                      | "v" | "w" | "x" | "y" | "z"



