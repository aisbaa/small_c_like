+---------------------------------+
|                                 |
| <> - for non terminal statement |
| [] - optional items             |
| {} - repeat 0 or more times     |
| () - group                      |
| |  - alternative's              |
|                                 |
+---------------------------------+


* simple program scheme
** function declaration
*** code block
** main function
*** code block


* code block
** var declration
*** simple
*** with assignment
**** data
**** expresion
***** arithmetic
***** boolean
** var assignment
*** data
*** expresion
**** arithmetic
**** boolean
** control structures
*** if
*** if else
** loop structures
*** for
**** code block
*** while
**** code block
** function calls
*** simple
*** with assignment
** io structures
*** input
*** output
** return
*** return code
**** var
**** value


* bnf

+- PROGRAM -----------------------+
<PROGRAM>              ::= {[<function_declaration>]}
                           "int main() {" <code_block> "}"

+- FUNCTION ----------------------+
<function_declaration> ::= <data_type> <function_name> "(" [<parameter_list>] ")" "{" <function_body> "};"

<function_call>        ::= [<variable> "="] <function_name> "(" [<parameter_list>] ");"

+-+
<function_name>        ::= <word>

<function_body>        ::= <code_block> <return> <code_block>

+- CODE BLOCK --------------------+
<code_block>        ::= [ { ( <simple_code_block> | <return> ) } ]

<simple_code_block> ::= <variable_declaration> | <function_call> | <while> | <for> | <if>


+- OUTPUT ----------------------------+
<output_declaration>   ::= "printf(" <output_data> ");"
<output_data>          ::= ["'" <word> "'"] | <variable>

// ar tik viena kintamajį galima išspausdint?


+- INPUT -----------------------------+
<input_declaration>    ::= "scanf(" <variable> ");"


+- CONTROL STATMENTS -----------------+
<if>                   ::= "if (" <if_body> ")" "{" <simple_code_block> "}"
<if_body>              ::= <if_declaration> | <if_declaration> <logical_operator> <if_body>
<if_declaration>       ::= <type> <comparison_operator> <type>
<type>                 ::= <variable> | <digit> | '"' <word> '"'

+- CYCLES ----------------------------+
<for>                  ::= "for (" <for_body> ")" "{" <simple_code_block> "}"
<for_body>             ::= "int" <variable> "=" <digit> ";" <variable> <for_comparison> <digit> ";" <variable> "=" <variable> "+" <digit> 
<for_comparison>       ::= "<" | "<="

<while>                ::= "while (" <while_body> ")" "{" <simple_code_block> "}"
<while_body>           ::= ( <variable> <comparison_operator> ) <digit> | '"' <word> '"'

<comparison_operator>  ::= "==" | "!=" | "<>" | ">" | "<" | "<=" | ">="
<logical_operator>     ::= "&&" | "||"

+- ARITHMETIC ------------------------+
<arithmetic_syntax>    ::= <variable> | <variable_declaration> "=" <expression> ";"
<expression>           ::= <term> | <factor> <composition> <term>
<term>                 ::= <factor> | <factor> <multi_div> <term>
<factor>               ::= <digit> | "(" <expression> ")"
<composition>          ::= "+" | "-"
<multi_div>            ::= "*" | "/"

+- VARIABLE --------------------------+
<variable_declaration> ::= <data_type> <variable> ";" | <data_type> <variable> "=" <variable_value> ";"
<variable>             ::= <word>
<variable_value>       ::= <digit> | '"' <word> '"'

+- ARRAY -------------------------+
<array_declaration> ::= <data_type> <word> "[" <natural_number> "]" ["=" <fill_array_values>] ";"

<array_usage>       ::= word "[" <natural_number> "]"

+-+
<fill_array_values> ::= <numeric_array_fill> | <char_array_fill>

<numeric_array_fill>::= "{" <int> {"," <int>} "}"

<char_array_fill>   ::= '"' <word> '"'

+- STRUCT ------------------------+
<struct>            ::= <name> "{" <struct_body> "};"

<struct_body>       ::= [ { <variable_declaration> | <struct_declaration> } ]

+- SIMPLE DATA TYPES -------------+
<data_type>         ::= "int" | "char"

<int>               ::= "0" | [ "-" ] <natural_number>

<char>              ::= "'" (<letter> | <digit>) "'"


+- GENERIC -----------------------+
<parameter_list>    ::= <parameter> [ {"," <parameter>} ]

<parameter>         ::= <data_type> <word>

+-+
<natural_number>    ::= <digit> | <digit_exclude_zero> {<digit>}

<digit_exclude_zero>::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

<digit>             ::= "0" | <digit_exclude_zero>

+-+
<word>              ::= <letter> {(<letter>| <digit>)}

<letter>            ::= "A" | "B" | "C" | "D" | "E" | "F" | "G"
                      | "H" | "I" | "J" | "K" | "L" | "M" | "N"
                      | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
                      | "V" | "W" | "X" | "Y" | "Z" |
                      | "a" | "b" | "c" | "d" | "e" | "f" | "g"
                      | "h" | "i" | "j" | "k" | "l" | "m" | "n"
                      | "o" | "p" | "q" | "r" | "s" | "t" | "u"
                      | "v" | "w" | "x" | "y" | "z"

+---------------------------------+
